import { Globe, Box, BookOpen, Clock } from "lucide-react";

export const projects = [
  {
    title: "HustleX",
    description: [
      "So I made this productivity suite that has 6 different tools all in one place - time tracking, skills tracker, timetable, contests, LeetCode stats, and a dynamic scheduler.",
      "Had to figure out secure login stuff - email verification, password resets, that kind of thing.",
      "The UI changes based on your theme and has nice transitions (Framer Motion FTW!) - people seem to use it longer because of that.",
      "Used a lot of custom hooks and Context API in React so I wasn’t repeating myself all over the codebase.",
      "Built some RESTful APIs with MongoDB that don’t crash even when lots of people are using it.",
      "Added charts so people can see how they’re doing - everyone loves the data visualization!",
    ],
    tech: [
      "React",
      "Express.js",
      "MongoDB",
      "Node.js",
      "TailwindCSS",
      "Framer Motion",
      "JWT",
      "Recharts",
      "Nodemailer",
    ],
    github: "https://github.com/DixitAbhinav/hustlex",
    demo: "https://www.hustlex.in",
    video: "https://youtu.be/JdqK9DutOmA",
    icon: Clock,
  },
  {
    title: "ChronoSpace",
    description: [
      "So I built this blogging platform where people can write, read, and connect — everything from the editor to the search is built to feel smooth and useful.",
      "Added a clean, rich-text editor — people actually enjoy writing in it, which feels like a win.",
      "Set up JWT auth plus Google login for anyone who doesn’t want to remember another password.",
      "Spent AGES tuning MongoDB queries with aggregation pipelines — but now it flies, even with tons of blogs and comments.",
      "Used Tailwind and React to make everything responsive and snappy — no lag, no clutter.",
      "Images are uploaded to AWS S3 so they load reliably no matter how many users are online.",
      "Different roles for users, bloggers, and admins with approval flows and custom dashboards.",
      "Email notifications fire off in real-time for things like blog approvals or account updates — keeps users in the loop.",
      "You can follow people, like posts, drop comments — it’s got that social vibe too.",
      "Admins get tools to feature posts, manage users, and even DM them directly.",
      "Honestly just tried to make it feel like a place people would actually want to write and hang out in.",
    ],
    tech: [
      "React",
      "Node.js",
      "MongoDB",
      "AWS S3",
      "JWT",
      "TailwindCSS",
      "Google OAuth",
      "Nodemailer",
    ],
    github: "https://github.com/DixitAbhinav/chronospace-frontend",
    demo: "https://chronospace-frontend.vercel.app/",
    video: "https://youtu.be/HfL4udUrF6c",
    icon: Globe,
  },
  {
    title: "MediaFlow",
    description: [
      "Wanted to try building a video platform backend — think YouTube-lite — so I spun up MediaFlow with all the basics in place.",
      "Used Node.js and Express to build out the backend and structured the API RESTfully from the ground up.",
      "Got JWT auth running smoothly with bcrypt for password hashing — security sorted.",
      "Hooked it up with Cloudinary for storing media, so uploads are fast and always available.",
      "MongoDB with Mongoose handles all the data — users, videos, comments — pretty scalable too.",
      "Kept the code modular and clean so features like playlists and likes can be added later without much refactor.",
      "It’s a solid backend project for anyone wanting to see media handling and user auth done right.",
    ],
    tech: ["Node.js", "Express.js", "MongoDB", "JWT", "Cloudinary", "Mongoose"],
    github: "https://github.com/DixitAbhinav/MediaFlow",
    video: "https://www.youtube.com/watch?v=your_video_id_3",
    icon: Box,
  },
  {
    title: "Library Management System",
    description: [
      "Decided to blend Go and React for this one — a full-stack library system that handles everything from borrowing to catalog management.",
      "Built the backend in Go using Gin and GORM — snappy and super clean.",
      "Frontend in React with Tailwind for quick UI updates and solid responsiveness.",
      "Used PostgreSQL for structured data and MongoDB Atlas for extra flexibility where needed.",
      "RESTful API structure makes frontend integration smooth, especially for stuff like pagination and filtering.",
      "You can add books, assign them, return them — all the core features are handled with proper validation and error handling.",
      "This was a great deep dive into Go APIs, and it really showed me how powerful typed backend logic can be.",
    ],
    tech: ["Go", "React", "PostgreSQL", "MongoDB", "Gin", "GORM"],
    github: "https://github.com/DixitAbhinav/LibraryReactGo",
    video: "https://www.youtube.com/watch?v=your_video_id_4",
    icon: BookOpen,
  },
];
